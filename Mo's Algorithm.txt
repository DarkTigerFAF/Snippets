int cnt[N], arr[N], n, m, k, answr[N];
int ans = 0;

struct query {
    int l, r, q_idx, block_idx;

    query() {}
    query(int _l, int _r, int _q_idx) {
        l = _l - 1, r = _r - 1, q_idx = _q_idx, block_idx = _l / SQRTN;
    }
    bool operator <(const query &y) const {
        if (block_idx != y.block_idx)
            return block_idx < y.block_idx;
        return r < y.r;
    }
};

query queries[N];

void add(int idx) {
    ans += cnt[arr[idx] ^ k];
    cnt[arr[idx]]++;
}

void remove(int idx) {
    cnt[arr[idx]]--;
    if(cnt[arr[idx] ^ k])
        ans -= cnt[arr[idx] ^ k];
}

void process() {
    sort(queries, queries + m);

    int curL = 1, curR = 0;
    for (int i = 0; i < m; i++) {
        while (curL < queries[i].l) remove(curL++);
        while (curL > queries[i].l) add(--curL);
        while (curR < queries[i].r) add(++curR);
        while (curR > queries[i].r) remove(curR--);
        answr[queries[i].q_idx] = ans;
    }
}