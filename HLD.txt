int n, q, chainID, pos;
const int LOG = 20;
ll enj[N], depth[N], up[N][LOG], sub[N], position[N], chain[N], chainHead[N], arr[N], posToNode[N];
vector<int> v[N];

struct segtree{
    int size;
    vector<ll> seg;

    void init(int n){
        size = 1;
        while(size < n)
            size *= 2;
        seg.resize(size * 2, 0ll);
    }

    void build(int x, int lx, int rx){
        if(rx - lx == 1){
            if(lx < n)
                seg[x] = arr[lx];
            return;
        }

        int mid = (lx + rx) / 2;
        build(2 * x + 1, lx, mid);
        build(2 * x + 2, mid, rx);

        seg[x] = (seg[2 * x + 1] ^ seg[2 * x + 2]);
    }

    void build(){
        build(0, 0, size);
    }

    int query(int l, int r, int x, int lx, int rx){
        if(lx >= r || l >= rx) return -1;
        if(rx - lx == 1)
            return lx;
        
        int mid = (lx + rx) / 2;
        if(seg[2 * x + 1])
            return query(l, r, 2 * x + 1, lx, mid);
        else if(seg[2 * x + 2])
            return query(l, r, 2 * x + 2, mid, rx);
        else return -1;
    }

    int query(int l, int r){
        return query(l, r + 1, 0, 0, size);
    }

    void update(int i, int x, int lx, int rx){
        if(rx - lx == 1){
            seg[x] ^= 1;
            return;
        }

        int mid = (lx + rx) / 2;
        if(i < mid) update(i, 2 * x + 1, lx, mid);
        else update(i, 2 * x + 2, mid, rx);

        seg[x] = seg[2 * x + 1] + seg[2 * x + 2];
    }

    void update(int i){
        update(i, 0, 0, size);
    }
};

void dfs(int node, int par){
    sub[node] = 1;
    for(auto u : v[node]){
        if(u == par) continue;
        depth[u] = depth[node] + 1;
        up[u][0] = node;
        for(int i = 1; i < 20; i++)
            up[u][i] = up[up[u][i - 1]][i - 1];
        dfs(u, node);
        sub[node] += sub[u];
    }
}

void HLD(int node, int par){
    int hChild = -1, hSize = 0;
    chain[node] = chainID;
    position[node] = pos;
    posToNode[pos] = node;
    arr[pos++] = enj[node];
    for(auto u : v[node]){
        if(u == par) continue;
        if(sub[u] > hSize){
            hSize = sub[u];
            hChild = u;
        }
    }

    if(hChild != -1)
        HLD(hChild, node);

    for(auto u : v[node]){
        if(u == par || u == hChild) continue;
        chainID++;
        chainHead[chainID] = u;
        HLD(u, node);
    }
}
segtree seg;

int lca(int a, int b){
    if(depth[a] < depth[b]) swap(a, b);

    int k = depth[a] - depth[b];
    for(int i = LOG - 1; i >= 0; i--)
        if(k & (1 << i))
            a = up[a][i];

    if(a == b) return a;

    for(int i = LOG - 1; i >= 0; i--)
        if(up[a][i] != up[b][i])
            a = up[a][i], b = up[b][i];

    return up[a][0];
}

int queryUp(int a, int b){
    while(chain[a] != chain[b]){
        int k = seg.query(position[chainHead[chain[a]]], position[a]);
        a = up[chainHead[chain[a]]][0];
        if(k != -1)
            return k;
    }
    return seg.query(position[b], position[a]);
}